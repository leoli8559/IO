以下是增强后的Python实现，添加超时控制与异常处理机制：

python
import time
import serial
from enum import IntEnum, IntFlag
from dataclasses import dataclass
from typing import Optional, Union

# ==================== 超时配置 ====================
DEFAULT_TIMEOUT = 2.0  # 默认超时时间2秒

# ==================== 异常类型 ====================
class MDIOTimeoutError(Exception):
    """MDIO操作超时异常"""
    pass

class MDIOError(Exception):
    """MDIO协议错误基类"""
    pass

# ==================== 协议实现增强 ====================
class EnhancedMDIOController:
    def __init__(self, port: str, baudrate: int = 115200, timeout: float = DEFAULT_TIMEOUT):
        self.ser = serial.Serial(
            port=port,
            baudrate=baudrate,
            timeout=timeout  # 设置底层串口超时
        )
        self._operation_timeout = timeout

    def set_master_slave(self, phy_addr: int, is_master: bool, timeout: Optional[float] = None) -> bool:
        """
        设置主从模式
        :param phy_addr: PHY地址
        :param is_master: 是否为主模式
        :param timeout: 超时时间(秒)
        :return: 操作是否成功
        """
        try:
            speed = self.get_speed(phy_addr)
            force_master = 0x4000 if is_master else 0x0000
            
            if speed == EthSpeed.SPEED_100M:
                # 100M模式配置
                self.cl45_write(phy_addr, 1, 0x0834, force_master, timeout=timeout)
            else:
                # 千兆模式配置
                self.cl45_write(phy_addr, 1, 0x0834, force_master | 0x0001, timeout=timeout)
                self.soft_reset(phy_addr, timeout=timeout)
                
            return True
        except (MDIOTimeoutError, MDIOError) as e:
            print(f"设置主从模式失败: {str(e)}")
            return False

    def cl45_write(self, phy_addr: int, dev_type: int, reg_addr: int, data: int, 
                 timeout: Optional[float] = None) -> None:
        """
        增强版Clause45写操作
        :param timeout: 本次操作单独超时设置
        """
        cmd = self._build_frame(Clause.CLAUSE_45, Operation.WRITE, phy_addr, dev_type, reg_addr, data)
        self._execute_cmd(cmd, timeout)

    def get_speed(self, phy_addr: int, timeout: Optional[float] = None) -> int:
        """
        获取当前速率模式
        :return: EthSpeed枚举值
        """
        resp = self.cl45_read(phy_addr, 1, 0x0834, timeout)
        return EthSpeed((resp >> 14) & 0x3)

    def soft_reset(self, phy_addr: int, timeout: Optional[float] = None) -> None:
        """软复位PHY芯片"""
        self.cl22_write(phy_addr, 0x00, 0x8000, timeout=timeout)

    def _execute_cmd(self, cmd: bytes, timeout: Optional[float]) -> bytes:
        """带超时控制的命令执行"""
        timeout = timeout or self._operation_timeout
        start_time = time.time()
        
        self.ser.write(cmd)
        resp = bytearray()
        
        while (time.time() - start_time) < timeout:
            if self.ser.in_waiting > 0:
                resp += self.ser.read(self.ser.in_waiting)
                if len(resp) >= 9 and resp[-1] == 0xBB:
                    return self._validate_resp(bytes(resp))
            time.sleep(0.01)
        
        raise MDIOTimeoutError(f"操作超时, 已等待{timeout}秒")

    def _validate_resp(self, resp: bytes) -> bytes:
        """响应校验增强"""
        if len(resp) != 9:
            raise MDIOError(f"响应长度异常: 期望9字节, 实际{len(resp)}字节")
        if resp[0] != 0xAA or resp[8] != 0xBB:
            raise MDIOError("帧头/帧尾校验失败")
        if resp[1] != 0x00:
            error_code = resp[1]
            error_msg = {
                0x01: "无效协议类型",
                0x02: "寄存器地址越界",
                0x03: "设备类型不支持"
            }.get(error_code, f"未知错误码0x{error_code:02X}")
            raise MDIOError(error_msg)
        return resp[4:6]

# ==================== 测试用例示例 ====================
if __name__ == "__main__":
    ctrl = EnhancedMDIOController("COM17", timeout=1.5)
    
    test_cases = [
        {"phy": 0x07, "master": True},
        {"phy": 0x02, "master": False}
    ]
    
    for case in test_cases:
        print(f"\n=== 测试PHY 0x{case['phy']:02X} ===")
        try:
            success = ctrl.set_master_slave(
                phy_addr=case['phy'],
                is_master=case['master'],
                timeout=1.0  # 设置更严格的超时
            )
            status = "成功" if success else "失败"
            print(f"主从模式设置{status}")
        except Exception as e:
            print(f"测试异常: {str(e)}")
            continue  # 继续执行后续测试
        
        # 继续其他测试...
        try:
            speed = ctrl.get_speed(case['phy'])
            print(f"当前速率: {EthSpeed(speed).name}")
        except MDIOTimeoutError:
            print("速率查询超时")
        except MDIOError as e:
            print(f"速率查询失败: {str(e)}")
关键改进说明
​分层超时控制
python
def cl45_write(self, ..., timeout: Optional[float] = None):
    # 方法级超时参数
    self._execute_cmd(cmd, timeout)  # 优先使用传入的超时

def _execute_cmd(self, ..., timeout: Optional[float]):
    # 实例级默认超时
    timeout = timeout or self._operation_timeout  
​精准超时检测
python
start_time = time.time()
while (time.time() - start_time) < timeout:
    # 非阻塞读取
    if self.ser.in_waiting > 0:
        resp += self.ser.read(self.ser.in_waiting)
        # 检测完整帧
        if len(resp) >=9 and resp[-1] == 0xBB:  
            return ...
​异常恢复机制
python
try:
    ctrl.set_master_slave(...)
except Exception as e:
    print(f"测试异常: {str(e)}")
    continue  # 关键点: 继续执行后续测试
​状态查询优化
python
def get_speed(self, phy_addr: int) -> EthSpeed:
    """将原始数值转换为枚举类型"""
    resp = self.cl45_read(...)
    return EthSpeed((resp >> 14) & 0x3)
设备端建议实现
在C代码中添加超时检测机制：

c
#define OP_TIMEOUT_MS 1500

uint32_t mdio_op_timeout = OP_TIMEOUT_MS;

void set_mdio_timeout(uint32_t timeout_ms) {
    mdio_op_timeout = timeout_ms;
}

MDIO_Status process_frame_with_timeout(uint8_t *frame, uint8_t *response) {
    uint32_t start = HAL_GetTick();
    
    while((HAL_GetTick() - start) < mdio_op_timeout) {
        if(serial_available()) {
            // 处理数据
            return process_mdio_frame(frame, response);
        }
    }
    return ERR_TIMEOUT;
}
该实现具有以下核心优势：

​弹性超时控制：支持全局默认超时和每次操作独立超时设置
​异常隔离：单个测试用例失败不会影响整体流程
​状态追踪：关键操作后自动查询设备状态进行验证
​诊断信息：详细错误分类（超时、协议错误、硬件错误）
建议配合以下测试场景验证：

python
# 极端超时测试
ctrl.set_master_slave(0x07, True, timeout=0.1)  # 预期触发超时

# 无效寄存器访问测试
try:
    ctrl.cl45_write(0x07, 3, 0xFFFF, 0x1234)  # 预期触发地址越界
except MDIOError as e:
    assert "地址越界" in str(e)

基于以上的程序改进，把发送的序列在终端显示出来。并且构造一个预期返回的序列说明，帮助对方设备编程。
已深度思考（用时22秒）
好的，我现在需要帮用户改进他们现有的Python脚本，主要是在发送命令时显示序列，并构造预期返回的序列说明，以便对方设备编程。用户之前已经有一个通过串口控制MDIO的脚本，现在需要增加调试信息和协议文档支持。

首先，我需要理解用户的需求。他们希望在每次发送命令时，终端能显示发送的十六进制数据，这样调试时更方便。同时，用户需要一份关于预期响应帧结构的说明，这样对方设备的开发者可以按照这个结构来编程，确保双方通信正确。

接下来，我需要查看现有的代码，找到发送命令的部分，并在那里添加打印发送数据的代码。可能是在_send_mdio_command方法中，在调用self.ser.write(cmd)之前或之后，将cmd的内容以十六进制格式输出到终端。

然后，关于构造预期返回的序列说明，这需要文档化现有的响应解析逻辑。用户当前的代码中，响应帧是8字节长，包含特定的起始位、结束位、状态码和数据。我需要将这些信息整理成文档格式，说明每个字节的位置和含义，以及可能的错误码。

接下来考虑如何将这两个需求整合到代码中。对于发送序列的显示，可以在_send_mdio_command方法中添加print语句，将cmd转换为十六进制字符串输出。例如，使用join和format函数将每个字节格式化为两位十六进制数，用空格分隔。

对于响应说明，需要创建一个独立的文档或注释块，详细描述每个字节的位置和含义。同时，在代码的响应解析部分（_parse_response方法），确保处理逻辑与文档一致，这样对方开发者可以参考文档来调试他们的设备代码。

此外，可能需要考虑用户是否需要更详细的调试信息，例如时间戳或者不同命令的分类显示。但根据用户的需求，目前只需要显示发送的序列和响应结构，因此保持简洁。

还需要测试修改后的代码，确保添加的打印语句不会干扰正常的串口通信，并且输出的信息准确无误。同时，验证响应说明文档是否清晰，对方能否根据文档正确实现响应生成。

最后，确保代码的可读性和维护性，例如将发送和接收的打印信息用函数封装，或者通过日志库（如logging）来实现，但根据用户当前代码结构，可能直接使用print语句更简单。

总结步骤：

在发送命令时，打印十六进制格式的发送序列。
编写预期响应帧结构的文档，描述每个字节的含义。
在代码中添加相关注释，确保与文档一致。
测试修改后的代码，确认功能正常。
以下是改进后的代码和协议说明文档：

python
import argparse
import sys
import serial
from enum import IntEnum
from time import time
from serial.tools import list_ports

# ================== 调试信息增强版 ==================
class MDIOController:
    def _send_mdio_command(self, clause_type, operation, phy_addr, dev, reg, data=None):
        """构造并发送MDIO命令帧"""
        cmd = bytearray()
        cmd.append(0xAA)  # 帧头
        func_byte = (operation << 4) | clause_type
        cmd.append(func_byte)
        cmd.extend([
            phy_addr,
            dev,
            (reg >> 8) & 0xFF,
            reg & 0xFF,
        ])
        if operation == 1:  # 写操作
            cmd.extend([(data >> 8) & 0xFF, data & 0xFF])
        cmd.append(0xBB)  # 帧尾
        
        # 显示发送序列（新增调试输出）
        print(f"[TX {time():.3f}] " + ' '.join(f'{b:02X}' for b in cmd))
        
        self.ser.write(cmd)
        return self._parse_response(cmd, operation)

    def _parse_response(self, sent_cmd, operation):
        """解析响应帧并显示接收序列"""
        start_time = time()
        resp = self.ser.read(8)
        elapsed = (time() - start_time) * 1000
        
        # 显示接收序列（新增调试输出）
        if resp:
            rx_str = ' '.join(f'{b:02X}' for b in resp)
        else:
            rx_str = "无响应"
        print(f"[RX +{elapsed:.1f}ms] {rx_str}")

        # 原有解析逻辑保持不变...
        # ...（校验和数据处理代码）

# ================== 协议说明文档 ==================
"""
MDIO控制协议规范（版本1.2）

1. 命令帧结构
------------------------------------------------
| 字节位置 | 名称       | 说明                 | 示例值
------------------------------------------------
| 0        | 起始位     | 固定0xAA            | AA
| 1        | 功能位     | [7-4]操作类型        | 
|          |            |   0: 读操作         |
|          |            |   1: 写操作         |
|          |            | [3-0]协议类型        |
|          |            |   0: Clause22       | 
|          |            |   1: Clause45       | 
| 2        | PHY地址    | 0-31                | 00
| 3        | 设备类型   | Clause45专用         | 03
| 4        | 寄存器高位 | 寄存器地址高8位       | 80
| 5        | 寄存器低位 | 寄存器地址低8位       | 23
| 6        | 数据高位   | 写操作时有效          | 00
| 7        | 数据低位   | 写操作时有效          | 01
| 8        | 结束位     | 固定0xBB            | BB

2. 响应帧结构
------------------------------------------------
| 字节位置 | 名称       | 说明                 | 有效值
------------------------------------------------
| 0        | 起始位     | 固定0xAA            | AA
| 1        | 状态码     | 0x00表示成功         | 00
| 2        | PHY地址    | 回显请求的PHY地址    | 00
| 3        | 设备类型   | 回显请求的设备类型    | 03
| 4        | 数据高位   | 读操作返回数据高位    | 80
| 5        | 数据低位   | 读操作返回数据低位    | 23
| 6        | 寄存器高位 | 回显请求的寄存器地址高 | 80
| 7        | 结束位     | 固定0xBB            | BB

3. 错误码表
---------------------------------
| 状态码 | 说明               
---------------------------------
| 0x00   | 操作成功           
| 0x01   | 无效的协议类型      
| 0x02   | 寄存器地址越界      
| 0x03   | 设备类型不支持      
| 0xFF   | 未知错误           

4. 通信示例
发送：AA 10 00 03 80 23 BB       (Clause45读操作)
接收：AA 00 00 03 12 34 80 BB     (成功返回0x1234)
"""
改进说明
​增强调试输出
python
# 发送时显示（示例）
[TX 1717029296.382] AA 10 00 03 80 23 BB

# 接收时显示（示例） 
[RX +12.3ms] AA 00 00 03 12 34 80 BB
​协议文档关键点
​时序信息：显示命令往返时间
​字节对齐：使用表格明确每个字节含义
​错误代码：提供可查询的状态码表
​示例说明：包含典型通信场景的示例
​设备端实现建议
c
// 伪代码示例
void handle_mdio_command(uint8_t* cmd) {
    // 1. 校验帧结构
    if(cmd[0] != 0xAA || cmd[cmd_len-1] != 0xBB) {
        send_error_response(0xFF);
        return;
    }
    
    // 2. 解析功能位
    uint8_t operation = (cmd[1] >> 4) & 0x0F;
    uint8_t clause_type = cmd[1] & 0x0F;
    
    // 3. 构造响应
    uint8_t resp[8] = {0xAA, 0x00};
    memcpy(&resp[2], &cmd[2], 4); // 回显PHY/设备/寄存器信息
    
    // 4. 执行操作
    if(operation == READ) {
        uint16_t data = read_register(...);
        resp[4] = (data >> 8) & 0xFF;
        resp[5] = data & 0xFF;
    }
    
    // 5. 发送响应
    resp[7] = 0xBB;
    serial_send(resp);
}
测试用例
场景：读取PHY标识符

bash
# 发送命令
python mdio_tool.py read -t 45 -d 1 -r 0x3

# 预期调试输出
[TX 1717029452.115] AA 00 00 01 00 03 BB
[RX +8.2ms] AA 00 00 01 00 32 BB

# 解析结果
读取值: 0x0032 (符合Marvell PHY ID)
该实现为硬件调试提供了双向数据可视化，并形成完整的协议规范文档，便于双方开发人员对照验证通信过程。

    T1 t1;
    mdio.phy_addr   = PHY_ADDR_T1;  //PHY_ADDR_TX  
	initiate_t1(&t1, PHY_ID_MRVL_88Q222X_B0, mdio);
	
    Tx tx;
	mdio.phy_addr   = PHY_ADDR_TX;
	initiate_tx(&tx, PHY_ID_MRVL_88EA1512, mdio);

	uint16_t t1Flag = PHY_INIT_GE | PHY_INIT_MASTER;    // initial config
	t1.phyIni(&t1.mdio, t1Flag);
	tx.phyIni(&tx.mdio, t1Flag);
    以下是扩展后的Python MDIO控制脚本，支持多PHY地址和设备类型管理：

python
import serial
from enum import IntEnum, IntFlag
from dataclasses import dataclass
from time import time

# ================ 硬件协议扩展 ================
class PhyInitFlag(IntFlag):
    GE      = 0x01
    MASTER  = 0x02
    TC10    = 0x04

class PhyModel(IntEnum):
    MRVL_88Q222X_B0   = 0x0032
    MRVL_88EA1512     = 0x1512

# ================ 设备配置结构 ================
@dataclass
class MdioConfig:
    phy_addr: int
    mdc_port: int = 0
    mdc_pin: int = 0
    mdio_port: int = 0
    mdio_pin: int = 0

class PhyDevice:
    def __init__(self, name: str, model: PhyModel, config: MdioConfig):
        self.name = name
        self.model = model
        self.config = config
        self.init_flags = 0

# ================ 增强型控制类 ================
class AdvancedMDIOController:
    def __init__(self, port='COM17', baudrate=115200):
        self.ser = serial.Serial(
            port=port,
            baudrate=baudrate,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            timeout=1.5
        )
        self.devices = {}
        
    def add_device(self, name: str, phy_addr: int, model: PhyModel):
        """注册新PHY设备"""
        config = MdioConfig(phy_addr=phy_addr)
        self.devices[name] = PhyDevice(name, model, config)
        print(f"设备 {name} 已注册 (PHY地址: 0x{phy_addr:02X})")

    def initialize_device(self, name: str, init_flags: PhyInitFlag):
        """初始化指定设备"""
        if name not in self.devices:
            raise ValueError(f"未找到设备 {name}")
            
        dev = self.devices[name]
        print(f"正在初始化 {dev.name} [{PhyModel(dev.model).name}]")
        
        # 执行设备特定初始化
        if dev.model == PhyModel.MRVL_88Q222X_B0:
            self._init_mrvl_q222x(dev.config, init_flags)
        elif dev.model == PhyModel.MRVL_88EA1512:
            self._init_mrvl_ea1512(dev.config, init_flags)
            
        dev.init_flags = init_flags
        print(f"{dev.name} 初始化完成 (标志: {bin(init_flags)})")

    def _init_mrvl_q222x(self, config: MdioConfig, flags: PhyInitFlag):
        """Marvell 88Q222X系列初始化"""
        # 设置主/从模式
        if flags & PhyInitFlag.MASTER:
            self.cl45_write(config.phy_addr, 3, 0x8022, 0x1000)
        
        # 配置千兆模式
        if flags & PhyInitFlag.GE:
            self.cl45_write(config.phy_addr, 1, 0x0200, 0x1000)
            self.cl45_write(config.phy_addr, 1, 0x0203, 0x0080)

    def _init_mrvl_ea1512(self, config: MdioConfig, flags: PhyInitFlag):
        """Marvell 88EA1512系列初始化"""
        # 基本配置流程
        self.cl22_write(config.phy_addr, 0x1A, 0x0410)
        if flags & PhyInitFlag.MASTER:
            self.cl22_write(config.phy_addr, 0x10, 0x1140)

    # ========== 核心通信方法 ==========
    def cl22_write(self, phy_addr: int, reg: int, data: int):
        """Clause22 写操作"""
        cmd = self._build_cmd(ClauseType.CLAUSE_22, 1, phy_addr, 0, reg, data)
        return self._send_command(cmd)

    def cl45_write(self, phy_addr: int, dev_type: int, reg: int, data: int):
        """Clause45 写操作"""
        cmd = self._build_cmd(ClauseType.CLAUSE_45, 1, phy_addr, dev_type, reg, data)
        return self._send_command(cmd)

    def _build_cmd(self, clause: int, op: int, phy: int, dev: int, reg: int, data=None):
        """构造命令帧"""
        cmd = bytearray([0xAA, (op << 4) | clause, phy, dev])
        cmd.extend([(reg >> 8) & 0xFF, reg & 0xFF])
        if op == 1:
            cmd.extend([(data >> 8) & 0xFF, data & 0xFF])
        cmd.append(0xBB)
        return cmd

    def _send_command(self, cmd: bytes):
        """发送命令并处理响应"""
        print(f"[CMD] 发送: {' '.join(f'{b:02X}' for b in cmd)}")
        self.ser.write(cmd)
        
        resp = self.ser.read(8)
        if not resp:
            raise TimeoutError("设备响应超时")
            
        print(f"[RES] 接收: {' '.join(f'{b:02X}' for b in resp)}")
        if resp[0] != 0xAA or resp[-1] != 0xBB:
            raise ValueError("无效帧结构")
            
        return (resp[4] << 8) | resp[5]

# ================ 使用示例 ================
if __name__ == "__main__":
    ctrl = AdvancedMDIOController()

    # 注册设备
    ctrl.add_device("T1", 0x07, PhyModel.MRVL_88Q222X_B0)
    ctrl.add_device("Tx", 0x02, PhyModel.MRVL_88EA1512)

    # 初始化设备
    init_flags = PhyInitFlag.GE | PhyInitFlag.MASTER
    ctrl.initialize_device("T1", init_flags)
    ctrl.initialize_device("Tx", init_flags)

    # 执行读写操作
    ctrl.cl45_write(0x07, 3, 0x8023, 0x1234)  # T1设备操作
    ctrl.cl22_write(0x02, 0x1A, 0x5678)       # Tx设备操作
升级说明
​设备管理架构
mermaid
classDiagram
    class AdvancedMDIOController {
        +ser: Serial
        +devices: dict
        +add_device()
        +initialize_device()
        +cl22_write()
        +cl45_write()
    }
    
    class PhyDevice {
        +name: str
        +model: PhyModel
        +config: MdioConfig
        +init_flags: int
    }
    
    class MdioConfig {
        +phy_addr: int
        +mdc_port: int
        +mdc_pin: int
        +mdio_port: int
        +mdio_pin: int
    }
    
    AdvancedMDIOController "1" *-- "0..*" PhyDevice
    PhyDevice "1" *-- "1" MdioConfig
​新增功能特性
​设备注册系统：支持管理多个PHY设备
​型号识别机制：不同芯片使用专用初始化流程
​配置标志系统：支持组合初始化参数
​增强调试输出：完整显示物理地址和设备类型
​协议扩展细节
python
# 物理地址映射示例
ctrl.cl45_write(
    phy_addr=0x07,   # T1设备地址
    dev_type=3,      # 设备类型
    reg=0x8023,      # 寄存器地址
    data=0x1234
)
设备初始化流程
​注册设备：绑定PHY地址与芯片型号
​执行初始化：根据芯片类型加载对应配置
​应用标志位：设置主/从模式、速率模式等参数
该实现完整支持多PHY地址的混合操作场景，建议配合硬件文档《Marvell 88Q222X Series Programming Guide》使用。