                                            stUart1.Buf[0]=1;
                                                  usart1_txN(&stUart1.Buf[0]  ,1)	;	//��01��
             }
                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x00)&& ( stUart1.Buf[11]  ==  0xBB)	)	// ͬ������ ���һ����� ��  //����λ��ͬ�����ƣ�	0x00
                        {	

                        for(i=0;i<8;i++){
                        Relay[i]=stUart1.Buf[2+i];
                        }

                        //  CS0; CS1; CS2; CS3; CS4; CS5; CS6; CS7; CS8; CS9; CS10; CS11; CS12; CS13; CS14; CS15; 

                                    for(i=0;i<128;i++){         // GetBits(x,y) -------------- ����ָ��� // OpenRelay(i,LEDRelayOFF );	

                                //	ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 

                                //	OpenRelay(i,ReadRelayBit[i] ,0);// �����Ĳ�Ҫһֱ���� EEP;  �������ǿ�Ƹ��£� 
                                    }



                        //stUart1.Buf[10]  = 	BoardID;						
                        stUart1.Buf[10]  = 1;			
                        stUart1.Buf[0]=     0x2;

                        usart1_txN(&stUart1.Buf[0]  ,1)	;	//��01��
                        }							

                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x5)&&( stUart1.Buf[11]  ==  0xBB)	)	//��ȡ1�� ID;	
                        {	

                                    for(i=0;i<128;i++){         // GetBits(x,y) // OpenRelay(i,LEDRelayOFF);	

                                //	ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 
                                    }	

                                //	stUart1.Buf[0 ]= ReadRelayBit[ stUart1.Buf[2] ];	

                                    usart1_txN( &stUart1.Buf[0]  ,1)	;	//��01��
                        }				


                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x6)&&( stUart1.Buf[11]  ==  0xBB)	)		//��ȡ���� ID;
                        {	


                        for(i=0;i<128;i++){         // GetBits(x,y) 

                        //ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 
                        }	

                        stUart1.Buf[10]  = 	BoardID; 		

                        usart1_txN( ReadRelayBit  ,128)	;	//��01��
                        }				

                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x03)&& ( stUart1.Buf[10]  ==  0xFF)&&( stUart1.Buf[11]  ==  0xBB)	)		//��1 ID;
                        {	


                        stUart1.Buf[0 ]= BoardID ;	

                        usart1_txN( &stUart1.Buf[0]  ,1)	;	//��01��  AA 04 00 00 01 00 00 00 00 00 FF BB 
                        }		

                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x04)&& ( stUart1.Buf[5]  ==  0x00)&& ( stUart1.Buf[10]  ==  0xFF)&&( stUart1.Buf[11]  ==  0xBB)	)		//Write ID ;1 ID;
                        {	


                        BoardID =  stUart1.Buf[4 ] ;	

                        stUart1.Buf[0 ]= BoardID ;	 	

                        // BoardBrate=	stUart1.Buf[4 ]; // AA 04 00 00 01 01 00 00 00 00 FF BB 

                        usart1_txN( &stUart1.Buf[0]  ,1)	;	//��01��  AA 04   00   00 05     00 00 00 00 00 FF BB 
                        }	

                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x04)&& ( stUart1.Buf[5]  ==  0x01)&& ( stUart1.Buf[10]  ==  0xFF)&&( stUart1.Buf[11]  ==  0xBB)	)		//Write Bautrate
                        {	
                        //BoardID =  stUart1.Buf[2 ] ;	


                                if((stUart1.Buf[4 ]>0)&&(stUart1.Buf[4 ]<7 ))
                                {
                                //BoardBrate=	stUart1.Buf[4 ]; // AA 04 00 00 01 01 00 00 00 00 FF BB 
                                // stUart1.Buf[0 ]= BoardBrate ;		
                                }	
                                else{
                            //	BoardBrate= 0 ;		
                                }	
                         //   stUart1.Buf[0 ]= BoardBrate ;			



                        usart1_txN( &stUart1.Buf[0]  ,1)	;	//��01��  AA 04 00 00 05 00 00 00 00 00 FF BB 
                        }		

                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x9)&& ( stUart1.Buf[2]  ==  0xee)&&( stUart1.Buf[11]  ==  0xBB)	)	// ȫ�ر�
                        {	

                        for(i=0;i<16;i++){
                        Relay[i]=0;
                        }

                        // DAT24CXX_WriteBackupRegister(0,&Relay[0],16); //  // AA 04 00 00 02 01 00 00 00 00 FF BB  //Baud:57600   //AA 04 00 00 05 01 00 00 00 00 FF BB  //Baud:115200  
                        // AT24CXX_Read(0,Relay,16);	 // Relay[group]	

                        //  AllPortOFF;
                        //  CS0; CS1; CS2; CS3; CS4; CS5; CS6; CS7; CS8; CS9; CS10; CS11; CS12; CS13; CS14; CS15; 

                        for(i=0;i<128;i++){         // GetBits(x,y) -------------- ����ָ��� // OpenRelay(i,LEDRelayOFF );	

                        ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 
                        OpenRelay(i,ReadRelayBit[i] ,0);// �����Ĳ�Ҫһֱ���� EEP;  �������ǿ�Ƹ��£� 
                        }



                        stUart1.Buf[10]  = 	BoardID;						

                        stUart1.Buf[0]=     0x1;

                        usart1_txN(&stUart1.Buf[0]  ,1)	;	//��01��
                        }	
                        else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x9)&& ( stUart1.Buf[2]  ==  0xff)&&( stUart1.Buf[11]  ==  0xBB)	)	// ȫ��	
                        {	
                        for(i=0;i<16;i++){
                        Relay[i]=0xff;
                        }


                        //  AllPortOFF;
                        //  CS0; CS1; CS2; CS3; CS4; CS5; CS6; CS7; CS8; CS9; CS10; CS11; CS12; CS13; CS14; CS15; 

                        for(i=0;i<128;i++){         // GetBits(x,y) -------------- ����ָ��� // OpenRelay(i,LEDRelayOFF );	

                        ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 
                        OpenRelay(i,ReadRelayBit[i] ,0);// �����Ĳ�Ҫһֱ���� EEP;  �������ǿ�Ƹ��£� 
                        }


                        stUart1.Buf[10]  = 	BoardID;						

                        stUart1.Buf[0]=1;
                        usart1_txN(&stUart1.Buf[0]  ,1)	;	//��01��
                        }
                        else{
                            
                        stUart1.Buf[0]=0xf2;
                        usart1_txN(&stUart1.Buf[0]  ,1)	;	//
                        }


                        //else if( ( stUart1.Buf[0 ]  ==  0xAA)  && ( stUart1.Buf[1]  ==  0x03)&&( stUart1.Buf[10]  ==  0xFF)&&( stUart1.Buf[11]  ==  0xBB)	)	//����ţ� BoardID
                        //{	// AA 03 00 00 00 64 00 00 00 00 FF BB //����ţ� BoardID
                        //	
                        //			 
                        ////			for(i=0;i<128;i++){         // GetBits(x,y) // OpenRelay(i,LEDRelayOFF);	

                        ////			ReadRelayBit[i]=GetBits(Relay[i/8],i%8) ;	// ͬ�����ڴ��У� Ϊ�˲�ͬ��BIT�ܲ��ܸ��ţ� 
                        ////			}	
                        //				
                        //			stUart1.Buf[0 ]= BoardID ;	
                        //			 
                        //			usart1_txN( &stUart1.Buf[0]  ,1)	;	//��01��
                        //}		 
}
 
 
 C语言 使能ATTINY1626 UART RX中断不触发ISR，如何解决？
6l7fqoea  于 2023-06-05  发布在  其他
关注(0)|答案(1)|浏览(165)

ATTINY1626出现接收中断问题。在池模式下，我可以接收UART数据。但通过使能UART RX中断不会发生这种情况。我不知道我在哪里错过了一些与中断相关的配置。
请告诉我是否有人遇到并解决了这类问题。
下面是代码。

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/fuse.h>

#define F_CPU 16000000UL / 2
#define FUSE_OSCCFG_16MHZ  (0x7D)

//#define cli()             __asm__ __volatile__ ("cli" ::)         ///< Disables global interrupts
//#define sei()             __asm__ __volatile__ ("sei" ::)         ///< Enables global interrupts

volatile unsigned char gvc_Rxbyte = 0;

FUSES = {
    .WDTCFG     = FUSE_WDTCFG_DEFAULT,
    .BODCFG     = FUSE_BODCFG_DEFAULT,
    .OSCCFG     = FUSE_OSCCFG_16MHZ,    // Run at 16 MHz and Calibration registers of the 20 MHz oscillator are accessible
    .SYSCFG0    = FUSE_SYSCFG0_DEFAULT, // Reset Pin Configured as UPDI
    .SYSCFG1    = FUSE_SYSCFG1_DEFAULT, // start-up time between power-on and code execution
    .APPEND     = 0x14, // FUSE_APPEND_DEFAULT - 4K APP CODE
    .BOOTEND    = 0x04, // FUSE_BOOTEND_DEFAULT - 1K BOOT CODE
};

void send_string(unsigned char uartNo, char *s);

void usart0_init(unsigned long int baudRate)
{
    unsigned int baud = 0;
    cli();
    SREG &=~(1 << 7);
//  PORTMUX.EVSYSROUTEA |= (1 << 1);
    //uint8_t sregBackup = CPU_SREG;
//  cli();
    baud = (F_CPU / baudRate) * 4;  // BAUD = (64 * fCLK_PER) / (S * fBAUD)
    // S is the number of samples per bit
    // Asynchronous Normal mode: S = 16
    // Asynchronous Double-Speed mode: S = 8
    // Synchronous mode: S = 2
    
    USART0.BAUDL = (unsigned char) baud;            // Set the baud rate (USARTn.BAUD).
    USART0.BAUDH = (unsigned char) (baud >> 8);
    
    USART0.CTRLC = 0x03;            // Set the frame format and mode of operation (USARTn.CTRLC).
    //set character size to 8. parity = none. stop bits = 1. async usart.
    PORTB.DIR |= PIN2_bm;           // Configure the TXD pin as an output.
    PORTB.DIR &= ~PIN3_bm;          // Configure the RXD pin as an input.
    
    USART0.CTRLA |=(1<<USART_RXCIE_bp) | (1<<USART_ABEIE_bp);//0x84;
    USART0.CTRLB |=(1<<USART_RXEN_bp)|(1<<USART_TXEN_bp) ;          // Enable the transmitter and the receiver (USARTn.CTRLB).
    
     sei();
}

void usart0WriteByte(unsigned char dataByte)
{
    while(!(USART0.STATUS & USART_DREIF_bm)); // wait till tx register is free
    USART0.TXDATAL = dataByte;              // load data in the tx register
}

unsigned char usart0ReadByte(void)
{
    unsigned char rxByte = 0;
    while(!(USART0.STATUS & USART_RXCIF_bm)); // wait for rx register data
    rxByte = USART0.RXDATAL;                // read data from the rx register
    
    return rxByte;
}

void send_string(unsigned char uartNo, char *s)
{
    while(*s)
    {
        usart0WriteByte(*s);        
        s++;
    }
}

int main(void)
{
    //unsigned char i=0;
    cli();
    
    _PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc | (0<<CLKCTRL_CLKOUT_bp ));    ///< To out the clock on clock out pin
    _PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm );                  ///< To set the clock pre-scaler as DIVIDED BY 2
    
    usart0_init(115200);                ///< Initializing UART0 as debug interface.
    //_PROTECTED_WRITE(CPU_SREG, (1 << CPU_I_bp));  
    //send_string(0, "System Initialized\r\n");
    _delay_ms(1000);
    gvc_Rxbyte = 'B';   
    
    while (1)
    {
         //sei();
        ////gvc_Rxbyte = usart0ReadByte();
        //usart0WriteByte(gvc_Rxbyte);
        //_delay_ms(1000);
    }
}

ISR (USART0_RXC_vect)
{
    if(USART0.STATUS & USART_RXCIF_bm)
    {
        gvc_Rxbyte = USART0.RXDATAL;
    }
    gvc_Rxbyte = USART0.RXDATAL;                // read data from the rx register
    usart0WriteByte(gvc_Rxbyte);    
}
**

我尝试启用UART RXIE配置。启用全局中断。甚至ISR也不调用接收缓冲器上可用的接收数据。
硬件路径似乎正常，因为接收功能在POOLing模式下工作。
c
来源：https://stackoverflow.com/questions/76355848/enabling-attiny1626-uart-rx-interrupt-doesnt-trigger-isr-how-to-resolve

    关注
    举报

1条答案
按热度按时间
nxagd54h

nxagd54h1#

您似乎在ISR中读取了USART0.RXDATAL字节两次。如果gvc_Rxbyte为0，可能是因为第二次阅读USART0.RXDATAL时覆盖了它。