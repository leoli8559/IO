#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

// 定义帧起始和结束标志
#define FRAME_START 0xAA
#define FRAME_END   0xBB

// 定义协议子句
#define CLAUSE_22 0x00
#define CLAUSE_45 0x01

// 定义操作码（根据不同子句可能有不同的定义）
// 这里假设 CLAUSE_22 和 CLAUSE_45 共享相同的操作码定义
#define OPERATION_WRITE 0x01
#define OPERATION_READ  0x02

// 定义错误码
#define ERROR_INVALID_FRAME      0xFF
#define ERROR_INVALID_LENGTH     0xFE
#define ERROR_INVALID_ADDRESS    0xFD
#define ERROR_UNSUPPORTED_CLAUSE 0xFC

// 定义设备寄存器结构体
typedef struct {
    uint16_t *registers; // 指向寄存器数组的指针
    uint16_t size;       // 寄存器数量
} Device;

// 定义帧相关信息结构体
typedef struct {
    uint8_t operation_clause; // 操作码子句字段
    uint8_t phy_addr;         // PHY 地址
    uint8_t clause;           // 子句 (CLAUSE_22 或 CLAUSE_45)
    uint8_t operation;        // 操作码 (OPERATION_WRITE 或 OPERATION_READ)
    uint16_t reg_addr;        // 寄存器地址
    uint16_t data;            // 数据（用于写操作）
} FrameInfo;

// 假设设备寄存器已经初始化
Device device;

// UART 发送函数声明
void uart_transmit(uint8_t data);

// 发送响应帧的辅助函数
bool send_response(uint8_t status, uint8_t phy_addr, uint8_t clause, uint16_t reg_addr, uint16_t data);

// 解析帧并填充 FrameInfo 结构体的函数
bool parse_frame(uint8_t *frame, uint8_t length, FrameInfo *info);

// 处理帧的函数
void process_frame(uint8_t *frame, uint8_t length);

// 示例初始化函数
void device_init(uint16_t *regs, uint16_t size);

// 示例 UART 发送函数
void uart_transmit(uint8_t data) {
    // 实现 UART 发送逻辑
    // 例如：USART_SendData(USART1, data);
    //       while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    printf("UART Transmit: 0x%02X\n", data); // 仅用于调试
}

// 发送响应帧的实现
bool send_response(uint8_t status, uint8_t phy_addr, uint8_t clause, uint16_t reg_addr, uint16_t data) {
    uart_transmit(FRAME_START);
    uart_transmit(status); // 状态码
    uart_transmit(phy_addr);
    uart_transmit(clause);         // 子句
    uart_transmit((reg_addr >> 8) & 0xFF);
    uart_transmit(reg_addr & 0xFF);
    // 仅在读操作或写成功时发送数据
    if ((status == OPERATION_READ) || (status == 0x00)) { 
        uart_transmit((data >> 8) & 0xFF);
        uart_transmit(data & 0xFF);
    }
    uart_transmit(FRAME_END);
    return true;
}

// 解析帧并填充 FrameInfo 结构体的函数
bool parse_frame(uint8_t *frame, uint8_t length, FrameInfo *info) {
    // 检查最小帧长度
    if (length < 6) { // 帧头 + 操作码子句 + PHY地址 + 寄存器地址低字节 + 帧尾
        return false;
    }

    // 检查帧头和帧尾
    if (frame[0] != FRAME_START || frame[length - 1] != FRAME_END) {
        return false;
    }

    // 提取操作码子句
    info->operation_clause = frame[1];

    // 提取 PHY 地址
    info->phy_addr = frame[2];

    // 提取寄存器地址
    info->reg_addr = (frame[4] << 8) | frame[5];

    // 根据操作码子句解析子句和操作码
    info->clause = info->operation_clause & 0x0F; // 子句
    info->operation = (info->operation_clause >> 4) & 0x0F; // 操作码

    // 根据子句进一步验证操作码（可选）
    if ((info->clause == CLAUSE_22 || info->clause == CLAUSE_45) && 
        (info->operation != OPERATION_WRITE && info->operation != OPERATION_READ)) {
        // 未知操作码
        return false;
    }

    // 如果是写操作，提取数据
    if (info->operation == OPERATION_WRITE) {
        if (length < 8) { // 帧头 + 操作码子句 + PHY地址 + 寄存器地址低字节 + 数据高字节 + 数据低字节 + 帧尾
            return false;
        }
        info->data = (frame[6] << 8) | frame[7];
    } else {
        info->data = 0; // 读操作不需要数据
    }

    return true;
}

// 处理帧的函数
void process_frame(uint8_t *frame, uint8_t length) {
    FrameInfo frame_info;

    // 解析帧
    if (!parse_frame(frame, length, &frame_info)) {
        uart_transmit(ERROR_INVALID_FRAME); // 发送无效帧错误响应
        return;
    }

    // 根据子句进行不同的处理
    if (frame_info.clause == CLAUSE_22) {
        // 处理 CLAUSE 22 的帧
        if (frame_info.operation == OPERATION_WRITE) {
            // 检查寄存器地址是否有效
            if (frame_info.reg_addr / 2 >= device.size) {
                send_response(ERROR_INVALID_ADDRESS, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, 0);
                return;
            }

            // 更新寄存器值
            device.registers[frame_info.reg_addr / 2] = frame_info.data;

            // 发送成功响应
            send_response(0x00, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, frame_info.data);

        } else if (frame_info.operation == OPERATION_READ) {
            // 检查寄存器地址是否有效
            if (frame_info.reg_addr / 2 >= device.size) {
                send_response(ERROR_INVALID_ADDRESS, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, 0);
                return;
            }

            // 读取寄存器值
            uint16_t reg_value = device.registers[frame_info.reg_addr / 2];

            // 发送读取响应
            send_response(OPERATION_READ, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, reg_value);

        } else {
            // 未知操作码
            uart_transmit(ERROR_INVALID_FRAME); // 或者可以定义一个特定的错误码
        }

    } else if (frame_info.clause == CLAUSE_45) {
        // 处理 CLAUSE 45 的帧
        // 根据 CLAUSE 45 的规范，可能需要不同的操作码解析
        // 这里假设 CLAUSE 45 使用相同的操作码定义

        if (frame_info.operation == OPERATION_WRITE) {
            // 检查寄存器地址是否有效
            // 注意：CLAUSE 45 的寄存器地址可能需要不同的处理
            if (frame_info.reg_addr / 2 >= device.size) {
                send_response(ERROR_INVALID_ADDRESS, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, 0);
                return;
            }

            // 更新寄存器值
            device.registers[frame_info.reg_addr / 2] = frame_info.data;

            // 发送成功响应
            send_response(0x00, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, frame_info.data);

        } else if (frame_info.operation == OPERATION_READ) {
            // 检查寄存器地址是否有效
            if (frame_info.reg_addr / 2 >= device.size) {
                send_response(ERROR_INVALID_ADDRESS, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, 0);
                return;
            }

            // 读取寄存器值
            uint16_t reg_value = device.registers[frame_info.reg_addr / 2];

            // 发送读取响应
            send_response(OPERATION_READ, frame_info.phy_addr, frame_info.clause, frame_info.reg_addr, reg_value);

        } else {
            // 未知操作码
            uart_transmit(ERROR_INVALID_FRAME); // 或者可以定义一个特定的错误码
        }

    } else {
        // 不支持的子句
        uart_transmit(ERROR_UNSUPPORTED_CLAUSE);
    }
}

// 示例初始化函数
void device_init(uint16_t *regs, uint16_t size) {
    device.registers = regs;
    device.size = size;
}

// 示例主函数（仅用于演示）
int main(void) {
    // 示例寄存器数组
    uint16_t registers[10] = {0};

    // 初始化设备
    device_init(registers, 10);

    // 示例帧数据（CLAUSE 22 写操作）
    uint8_t write_frame_clause22[] = {
        FRAME_START,
        (OPERATION_WRITE << 4) | CLAUSE_22, // 操作码 0x01, 子句 CLAUSE_22
        0x12,                               // PHY 地址
        0x34,                               // （可选字段，如果有的话）
        0x56,                               // 寄存器地址高字节
        0x78,                               // 寄存器地址低字节
        0x9A,                               // 数据高字节
        0xBC,                               // 数据低字节
        FRAME_END
    };

    // 处理写帧 (CLAUSE 22)
    process_frame(write_frame_clause22, sizeof(write_frame_clause22));

    // 示例帧数据（CLAUSE 22 读操作）
    uint8_t read_frame_clause22[] = {
        FRAME_START,
        (OPERATION_READ << 4) | CLAUSE_22, // 操作码 0x02, 子句 CLAUSE_22
        0x12,                              // PHY 地址
        0x34,                              // （可选字段，如果有的话）
        0x56,                              // 寄存器地址高字节
        0x78,                              // 寄存器地址低字节
        FRAME_END
    };

    // 处理读帧 (CLAUSE 22)
    process_frame(read_frame_clause22, sizeof(read_frame_clause22));

    // 示例帧数据（CLAUSE 45 写操作）
    uint8_t write_frame_clause45[] = {
        FRAME_START,
        (OPERATION_WRITE << 4) | CLAUSE_45, // 操作码 0x01, 子句 CLAUSE_45
        0x12,                               // PHY 地址
        0x34,                               // （可选字段，如果有的话）
        0x56,                               // 寄存器地址高字节
        0x78,                               // 寄存器地址低字节
        0x9A,                               // 数据高字节
        0xBC,                               // 数据低字节
        FRAME_END
    };

    // 处理写帧 (CLAUSE 45)
    process_frame(write_frame_clause45, sizeof(write_frame_clause45));

    // 示例帧数据（CLAUSE 45 读操作）
    uint8_t read_frame_clause45[] = {
        FRAME_START,
        (OPERATION_READ << 4) | CLAUSE_45, // 操作码 0x02, 子句 CLAUSE_45
        0x12,                              // PHY 地址
        0x34,                              // （可选字段，如果有的话）
        0x56,                              // 寄存器地址高字节
        0x78,                              // 寄存器地址低字节
        FRAME_END
    };

    // 处理读帧 (CLAUSE 45)
    process_frame(read_frame_clause45, sizeof(read_frame_clause45));

    return 0;
}